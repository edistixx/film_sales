# import libraries
# import pathlib
import numpy as np
import pandas as pd
from dash import Dash,html, dash_table,dcc,callback,Output,Input 
import plotly.express as px
import dash_bootstrap_components as dbc

# for git use
# PATH = pathlib.Path("__file__").parent
# DATA_PATH = PATH.joinpath("Data").resolve()
df2 = pd.read_csv("new_ff_data.csv")
ds = pd.read_csv("dates_and_total.csv")

# date casting
df2.Dates = pd.to_datetime(df2.Dates) 
ds.Date = pd.to_datetime(ds.Date) 

df2

ds.head(5)


def loyal_cust(year = 2014):
    
        d12 = df2.loc[df2.Dates.dt.year == year]
        customers = d12.CustomerName.unique()
        data11 = [len(d12.loc[d12.CustomerName == i]) for i in customers]
        df = pd.DataFrame({"Loyal_customers":customers,"no_of_visits":data11})
        df = df.sort_values(by = ["no_of_visits"],ascending = False)
        loyal_customers = df.head(3)
        loyal_customers.insert(2,"Ratings",["‚≠ê‚≠ê‚≠ê","‚≠ê‚≠ê","‚≠ê"])
        loyal_customers = loyal_customers.drop(columns = ["no_of_visits"])
        return loyal_customers


loyal_cust()

d12 = df2.loc[df2.Dates.dt.year == 2014]
customers22 = d12.Title.unique()
ans = [len(d12.loc[d12.Title == i]) for i in customers22]
min(ans)


#  # CREATING CHART AS FUNCTIONS   
def month_rec(year = 2017):
    
    al = df2.loc[df2.Dates.dt.year == year]
    data = [len(al.loc[al.Dates.dt.month == i]) for i in range(1,13,1)]
    labels = ["January","February","March","April","May","June","July","August","September","October","November","December"]
    fig = px.pie(df2, values=data, names=labels, hole=.75,width = 416,height = 300,color = labels,color_discrete_sequence =["darkslategray","darkcyan","peru","lavender","olivedrab","papayawhip","darkgray","olive","palegreen","palegoldenrod","cadetblue","green"])
    fig.update_layout(paper_bgcolor="white",plot_bgcolor='white',margin = {"l":10, "r":10, "t":10, "b":10})
    
    return fig
m2_title = "Monthly Contributions to revenue"

month_rec()


def pie_vis(year = 2015,genre = "Action",month = "December"):
    if month == "January":
        month = 1
          
    elif month == "February":
        month = 2

    elif month == "March":
        month = 3
    elif month == "April":
        month = 4
          
    elif month == "May":
        month = 5

    elif month == "June":
        month = 6
    elif month == "July":
        month = 7
          
    elif month == "August":
        month = 8

    elif month == "September":
        month = 9
    
    elif month == "October":
        month = 10
          
    elif month == "November":
        month = 11

    elif month == "December":
        month = 12
    
     
    dff =  df2.loc[df2["GenreName"] == genre] # input
    dff2 = dff.loc[dff.Dates.dt.month == month]
    year = dff2.loc[dff2["Dates"].dt.year == year] # input
   
    coll = [year.loc[year.RegionName == i].RegionName.count() for i in year.RegionName.unique()]
    # Total revenue generated per the given years
    labels = year.RegionName.unique()
    fig = px.pie(df2, values=coll, names=labels, hole=.75,width = 280,height = 230,color = labels,color_discrete_sequence = ["darkslategray","darkcyan","darkgray"])
    fig.update_layout(paper_bgcolor="white",plot_bgcolor='white',margin = {"l":5, "r":1, "t":30, "b":10})
    return fig;
pie_title = "Customer Population"

pie_vis()


def bar_vis(year = 2017):
    
    year = df2.loc[df2["Dates"].dt.year == year]# input
    xx = year.GenreName.unique()
    yy = [year[year.GenreName == i].Total.sum() for i in xx]
    fig = px.bar(df2,yy,xx,labels = {"x" :"Revenue","y":"Genrename"},orientation = 'h',width = 520,height = 221,color = xx,color_discrete_sequence = ["darkslategray","cadetblue","darkgray","darkcyan","lavender","olivedrab","darkgray","olive","palegreen","palegoldenrod"] )
    fig.update_layout(paper_bgcolor="white",plot_bgcolor='white',margin = {"l":5, "r":1, "t":30, "b":10})
    p2 = fig.add_traces(px.line(x=yy, y=xx,markers = True, color_discrete_sequence=["darkslategray"]).data)
    return p2
bar_title =  "Revenue generated by each genre"


bar_vis()

year = df2.loc[df2["Dates"].dt.year == 2017] # input
xx = year.GenreName.unique()
yy = [year[year.GenreName == i].Total.sum() for i in xx]
fig1 = px.line(df2,xx,yy, title = " Revenue generated by the individual genres per year",labels = {"y" :"Revenue","x":"Genrename"},width = 600,height = 250)
fig1.update_layout(paper_bgcolor="whitesmoke",plot_bgcolor='whitesmoke',margin = {"l":5, "r":1, "t":30, "b":10} )


def line_vis(genre = "Biography",year = 2012,month = "March"):
    
      if month == "January":
          month = 1
          
      elif month == "February":
          month = 2

      elif month == "March":
          month = 3
      elif month == "April":
          month = 4
          
      elif month == "May":
          month = 5

      elif month == "June":
          month = 6
      elif month == "July":
          month = 7
          
      elif month == "August":
          month = 8

      elif month == "September":
          month = 9
    
      elif month == "October":
          month = 10
          
      elif month == "November":
          month = 11

      elif month == "December":
          month = 12
        # return fig
      
      ndf = df2.sort_values(by = "Dates")
      inn1 = ndf.loc[ndf["GenreName"] == genre] # input
      inn2 = inn1.loc[inn1.Dates.dt.year == year]
      inn3 = inn2.loc[inn2.Dates.dt.month == month]
      
      xcomp1 = inn3.Dates.dt.day
      ycomp1 = inn3.Quantity
      fig = px.line(x =xcomp1,y = ycomp1,markers=False,labels = {"x":"day","y":"Sum of Quantity"} )
      fig.update_layout(paper_bgcolor="white",plot_bgcolor='white',  autosize=False,
      width=520,
      height=185,margin = {"l":5, "r":1, "t":30, "b":10})
      fig.update_traces(line_color='teal')
     
      return fig
line_title = "Trend of genre sales per day"

line_vis()

# # Machine learning

# importing libraries for time series analysis
from statsmodels.tsa.statespace.sarimax import SARIMAX
from statsmodels.tsa.arima.model import ARIMA
from statsmodels.graphics.tsaplots import plot_acf, plot_pacf


df123 = ds.copy()

# set date as index
df123 =  df123.set_index("Date")
df_train = df123[:round((70/100)*len(df123))]
df_test = df123[round((70/100)*len(df123)):]


# training the sarimax model and testing it
model = SARIMAX(df_train["Revenue"],order = (3,1,4),seasonal_order = (3,1,4,12))
model_fit = model.fit()
pred = model_fit.predict(start = df_test.index[0],end = df_test.index[-1])


# Data viewing the error 
dd = pd.DataFrame({"Actual":df_test.Revenue,"Predicted":pred,"Error":(abs(df_test.Revenue -pred )/df_test.Revenue)*100,"":"%"})
dd

# percentage accuracy
err = 100 - round(dd.Error.mean(),2)
print(f"The module is {err} % accurate")


# prediction function
def Rev_predict(month = "January",year = 2018):
      if month == "January":
          month = 1
          
      elif month == "February":
          month = 2

      elif month == "March":
          month = 3
      elif month == "April":
          month = 4
          
      elif month == "May":
          month = 5

      elif month == "June":
          month = 6
      elif month == "July":
          month = 7
          
      elif month == "August":
          month = 8

      elif month == "September":
          month = 9
    
      elif month == "October":
          month = 10
          
      elif month == "November":
          month = 11

      elif month == "December":
          month = 12
      f_date = pd.DataFrame({"Dates":pd.date_range("12-11-2017",f"{month}-01-{year}",freq = "m")})
      f_date.set_index("Dates",inplace = True)
      new_p = model_fit.predict(start = f_date.index[0],end = f_date.index[-1])
      fig = px.line(x = df123.index,y = df123.Revenue,labels = {"x":"Date","y":"Average Revenue"},color_discrete_sequence=["indigo"])
      
      p2 = fig.add_traces(px.line(new_p,markers = False, color_discrete_sequence=["indianred"]).data)
      p2.update_layout(paper_bgcolor="white",plot_bgcolor='white',margin = {"l":5, "r":5, "t":30, "b":10},width = 1000, height = 400)
      return p2
Rev_predict()

# # BUILDING DASHBOARD

# instantiate the app
app = Dash(external_stylesheets = [dbc.themes.COSMO])
server = app.server

# widgets 
dc1 = dcc.Dropdown(options = df2["GenreName"].unique(),value = "Biography",id = "genre_list",style = { "width" : 100}) 
dc11 = dcc.Dropdown(options = df2["GenreName"].unique(),value = "none" ,id = "genre_list1",style = { "width" : 100},placeholder = "Genre") 
dc2 = dcc.Dropdown(options = list(range(2012,2018,1)),value = 2012,id = "years",style = { "width" : 150})
dc3 = dcc.Input(id = "Quantity1",type = "number",placeholder = "Min Quantity",style = { "width" : 100})
dc4 = dcc.Input(id = "Quantity2",type = "number",placeholder = "Max Quantity",style = { "width" : 100})
dc33 = dcc.Input(id = "Price",type = "number",placeholder = "input price",style = { "width" : 100})
dc44 = dcc.Input(id = "Step",type = "number",placeholder = "input step",style = { "width" : 100})
dc7 = dcc.Dropdown(options = ["January","February","March","April","May","June","July","August","September","October","November","December"],value = "October",id = "month",style = { "width" : 150})

dcq1 = dcc.Input(id = "sing_Quantity",type = "number",placeholder = "Input Quantity",style = {"width" : 100})
dcR1 = dcc.Input(id = "Revenue",type = "text",placeholder = 0,style = {"width" : 600},disabled = True)
dc88 = dcc.Input(id = "year2",type = "number",placeholder = "Input year",style = {"width" : 100})
dcR2 = dcc.Input(id = "Total",type = "number",placeholder = 0,style = {"width" : 80},disabled = True)

item2 = dbc.DropdownMenu(label = "Genreüé¨",children = dc1,size = "sm",align_end=True,color = "darkslategray")
item3 = dbc.DropdownMenu(label = "Month‚åõ",children = dc7,size = "sm",align_end=True,color = "darkslategray")
item4 = dbc.DropdownMenu(label = "Year üóìÔ∏è",children = dc2,size = "sm",align_end=True,color = "darkslategray")

# # Sidebar and layout

sidebar_style = {
    "position" : "fixed",
    "top":0,
    "left":0,
    "buttom":0,
    "width":105,
    # "padding":"2rem 1 rem",
    "background-color":"darkslategray" , 
    "height":2000
}
content_style = {
    "margin-left":105,
    "margin-right":20,
}






def_sidebar = html.Div([
    html.Br(),
    html.Br(),
    html.Br(),

    

    dbc.Container([ 
        dbc.Row([
            dbc.Col([
        item3,
        html.Br(),
        item2,
        html.Br(),
        item4,
            ],width = {"size":3},className = "mb-1")])],
    ),
    
   
    html.Br(),
  
      dbc.Nav([ 
    dbc.NavLink("üè†",href = "/",active = "exact"),
    dbc.NavLink("üìà",href = "/page-1",active = "exact"),
    
        
    ],
    vertical = True,
    pills = False,
   
    )
    ],style = sidebar_style ,id = "default_side")




sidebar2 = html.Div([
    html.Br(),
    html.Br(),
    html.Br(),
    
    html.Br(),
    html.Br(),
    html.Br(),
   html.Br(),
    html.Br(),
       html.Br(),
    html.Br(),
    
    
   
      dbc.Nav([ 
    dbc.NavLink("   üè†",href = "/",active = "exact"),
    dbc.NavLink("   üìà",href = "/page-1",active = "exact"),
    
        
    ],
    vertical = True,
    pills = False,
   
    )
    ],style = sidebar_style )

# +
#listing contents in a card
cardp1 = dbc.Card([
     dbc.CardHeader([html.H5(line_title,style={'color': 'darkslategray'})]),
     dbc.CardBody([  
          html.Div(children  = [dcc.Graph(id = "line_chart",figure = line_vis())]),  
         ])]
,style = {
    "width":545,
    "height":290,
    "border-radius":5,
    "background":"white"
    })

cardp2 = dbc.Card([
      dbc.CardHeader([
          dbc.Container([
          dbc.Row([    
         dbc.Col([ html.H5(bar_title,style={'color': 'darkslategray'})],width = {"size":9}),
         dbc.Col([dcR2],width = {"offset":1,"size":1})     
          ])
          ])
      ]),
     dbc.CardBody([  
        html.Div(children = [dcc.Graph(id = "bar_chart", figure = bar_vis())])  
         ])]
,style = {
    "width":545,
    "height":291
    ,
    "border-radius":5,
    "background":"white"
    })

cardp3 = dbc.Card([
     dbc.CardHeader([html.H5([pie_title," ","&"," ",m2_title] ,style={'color': 'darkslategray'})],className = "text-center"),
     dbc.CardBody([  
         dbc.Row([ dbc.Col([
        html.Div(children  = [dcc.Graph(id = "pie_chart",figure = pie_vis())])],width = {"size":5})
                  
         , dbc.Col([html.Div(children  = [dcc.Graph(id = "m2_chart",figure = month_rec())]) 
                   ],width = {"size":1})])
         ])]
,style = {
    "width":740,
    "height":370,
    "border-radius":5,
    "background":"white"
    })
# -

home_content = dbc.Container([
    dbc.Row([ dbc.Col([
            html.H1("FILM-SALES DASHBOARD",className = ["text-center"], style={'color': 'darkslategray'})
            
        ])
               ]),
    
     
    dbc.Row([ 
        dbc.Col([ 
       cardp1,
        ], xs = 10, sm = 8,md = 9,lg = 9,xl = 6),
        
        dbc.Col([ 
             cardp2,  
        ], xs = 10, sm = 8,md = 5,lg = 6,xl = 6),
        

        
   ]),
    html.Br(),

    dbc.Row([
        dbc.Col(cardp3,
                xs = 10, sm = 11,md = 11,lg = 9,xl = 8),

        # dbc.Col(cardp4),
        dbc.Col([
          html.Div([],id = "table")
   ],width = {"offset":5},
                xs = 4, sm = 3,md = 3,lg = 4,xl = 1)

        
        
    ])
    ])



#listing contents in a card
ml_title = []
cardp22 = dbc.Card([
     dbc.CardHeader([

        dbc.Container([ 
            
         dbc.Row([
        dbc.Col([ html.Div(html.H5(ml_title,style={'color': 'darkslategray'}),id = "heading")],width={"size":7}),
        dbc.Col([dc88],width={"offset":1}),
        dbc.Col([dc7],width={"offset":0})
         
         ])
            
        ])
         
     ]),
     dbc.CardBody([
                    
             html.Div(children = [dcc.Graph(id = "Ml_graph", figure = Rev_predict())])
         
         ])]
,style = {
    "width":1020,
    "border-radius":5,
    "background":"whitesmoke"
    }
)




content2 = dbc.Container([

        
        dbc.Row([ 
            dbc.Col([ dbc.Nav([ 
    dbc.NavLink("Range Predictions",href = "/p2",active = "exact"),
    dbc.NavLink("Single Predictions",href = "/p3",active = "exact"),             
    ]
    ),
            ]),
        dbc.Col([ html.H1(
        "Fore-cast",style={'color': 'darkslategray'})],width = {"size":7})
        
        ]),

        html.Br(),
      dbc.Row([
    dbc.Col([ cardp22
        

       
    ],width = {"offset":1}
           
           
           
           ,),

    ]),
    ])





empt_content2 = dbc.Container([

        
        dbc.Row([ 
            dbc.Col([ dbc.Nav([ 
    dbc.NavLink("Range Predictions",href = "/p2",active = "exact"),
    dbc.NavLink("Single Predictions",href = "/p3",active = "exact"),             
    ]
    ),
            ]),
        dbc.Col([ html.H1(
        "Fore-cast",style={'color': 'darkslategray'})],width = {"size":7})
        
        
        ])
])



# +
cardc3 = dbc.Card(

    dbc.CardBody([ dcR1,
                  html.Br(),
                html.Br(),
                dbc.Container([
                   dbc.Row([ dbc.Col([dc88],width = {"offset":2}),
                           dbc.Col([dc7],width = {"offset":2})
                           ])
                ])
                 ]),
    
 style = {
    "width":630,
    "border-radius":5,
    "background":"whitesmoke",
    
})

content3 = dbc.Container([
 dbc.Row([
dbc.Col([ dbc.Nav([ 
    dbc.NavLink("Range Predictions",href = "/p2",active = "exact"),
         
    ]
    ),
            ]),
        
        dbc.Col([ html.H1(
        "Fore-cast",style={'color': 'darkslategray'})],width = {"size":7})
        
        ]),


    html.Br(),
        html.Br(),
    
    html.Br(),
        html.Br(),
    dbc.Row([

        dbc.Col([ 

       cardc3 ],width = {"offset":3})
     ]),
  


    
])

# design the layout
# an empty Div that displays an empty page 
main_content = html.Div(id = "page-content",style = content_style)
app.layout = html.Div([
    html.Div([ dcc.Location(id = "url"),main_content,def_sidebar,])
                      ])


@callback(Output("line_chart","figure"),[Input("genre_list","value"),Input("month","value"),Input("years","value")])
def update_linechart(genre_list,month,years):
   
    return line_vis(genre_list,years,month)
    
@callback(Output("pie_chart","figure"),[Input("years","value"),Input("genre_list","value"),Input("month","value")])
def update_pie(years,genre_list,month):
    return  pie_vis(years,genre_list,month)
    
@callback(Output("bar_chart","figure"),[Input("years","value")])
def update_bar(years):
    return  bar_vis(years)
@callback(Output("Total","value"),[Input("years","value")])
def update_space(years):
    year = df2.loc[df2["Dates"].dt.year == years]# input
    xx = year.GenreName.unique()
    yy = [year[year.GenreName == i].Total.sum() for i in xx]
    return round(sum(yy))
@callback(Output("page-content","children"),[Input("url","pathname")])
def render_p_content(pathname):
    if pathname == "/":
        return home_content
    elif pathname == "/page-1":
        return empt_content2
    elif pathname == "/p2":
        return content2
    elif pathname == "/p3":
        return content3

@callback(Output("default_side","children"),[Input("url","pathname")])
def render_p_content(pathname):
    if pathname == "/":
        return def_sidebar
    elif pathname == "/page-1":
        return sidebar2
    elif pathname == "/p2":
        return sidebar2
    elif pathname == "/p3":
        return sidebar2
    
 
        
@callback(Output("Ml_graph","figure"),[Input("year2","value"),Input("month","value")])      
def update_chart4(year2,month):
    ml_fig = Rev_predict(year2,month)
    
    return ml_fig

@callback(Output("Revenue","value"),[Input("year2","value"),Input("month","value")])      
def page3(year2,month):
    f_date1 = pd.DataFrame({"Dates":pd.date_range(f"{month}-01-{year2}",f"{month}-1-{year2}",freq = "d")})
    f_date1.set_index("Dates",inplace = True)
    single = model_fit.predict(start = f_date1.index[0],end = f_date1.index[-1])
    single[0]
    return f"The estimated average revenue by {month} {year2} is approximately {round(single[0],2)}"
    
@callback(Output("heading","children"),[Input("month","value"),Input("year2","value")])
def title1(month,year2 ):
    return f"Estimated revenue in {month} {year2} with respect to quantity"
   
@ callback(Output("m2_chart","figure"),[Input("years","value")])
def pie2(years):
    return month_rec(years)
    
@ callback(Output("table","children"),[Input("years","value")])
def loyal1(years):
    rec = loyal_cust(years)     
    return dash_table.DataTable(rec.to_dict('records')) 


if __name__ == '__main__':
    app.run_server(jupyter_mode = "tab",port = 14010)
# -


